{"version":3,"sources":["components/header.js","components/footer.js","data/endpoints/api.js","App.js","data/markdown/app_background.js","index.js"],"names":["Header","className","to","Footer","Date","getFullYear","getAllBuffySeasons","setSeasons","a","axios","get","then","res","data","catch","e","console","log","getAllBuffyCast","setCast","getAllAngelSeasons","setAngelSeasons","getAllAngelCast","setAngelCast","App","useState","seasons","cast","angelSeasons","angelCast","useEffect","id","source","map","season","idx","number","src","image","original","alt","episodeOrder","premiereDate","endDate","summary","castMember","person","name","medium","character","angelSeason","angelCastMember","Index","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d139f1c4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Header = () => (\r\n  <header className=\"masthead\">\r\n    <div>\r\n      <div>\r\n        <Link to=\"/\">\r\n          <h1 className=\"site-title\">Buffy Information Index</h1>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div className=\"footer\">\r\n      <footer>Â© {new Date().getFullYear()} - Kendall Howard</footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import axios from \"axios\";\r\n\r\n// a function that grabs all avatar characters pics! FEEL FREE TO DELETE THIS FUNCTION\r\nexport const getAllAvatarCharacters = async (setCharacters) => {\r\n  let example_var = \"\";\r\n  // here's an example of what adding a variable to a string looks like\r\n  // in this case it's empty, but imagine inserting different types of strings / numbers to grab different types of data\r\n  // check the documentation of your API to see the formating of the endpoint & which vars it can take!\r\n  const url1 = `https://last-airbender-api.herokuapp.com/api/v1/characters/${example_var}`;\r\n  return axios\r\n    .get(url1)\r\n    .then((res) => {\r\n      setCharacters(res.data);\r\n      // you don't have to return anything! this model would be good if you weren't passing the function as a param\r\n      // this would return an object saying the axios call was successful! (good for a success popup notification)\r\n      return { data: res.data, success: true };\r\n    })\r\n    .catch((e) => {\r\n      // if there is a failure, I return a custom object saying success is false, with the error message\r\n      // you don't have to do this! you could simply console.log(e)\r\n      return { success: false, message: e.message };\r\n    });\r\n};\r\n\r\n/**\r\n * TODO: define your own async function that uses Axios with a .then() & .catch() block\r\n * - it should at minimum take a function parameter\r\n * - inside your then block, try console.log(res.data) to see what is printed when your axios call succeeds\r\n * - from there, decide what part of res.data to pass to your function parameter (in this case, I passed the entire thing!)\r\n * - I also deleted my custom CSS from the index.css file so feel free to have fun & play around with the look of your app!\r\n */\r\nexport const getAllBuffySeasons = async (setSeasons) => {\r\n  const url2 = `https://api.tvmaze.com/shows/427/seasons`;\r\n  return axios\r\n    .get(url2)\r\n    .then((res) => {\r\n      setSeasons(res.data)\r\n      // you don't have to return anything! this model would be good if you weren't passing the function as a param\r\n      // this would return an object saying the axios call was successful! (good for a success popup notification)\r\n      })\r\n    .catch((e) =>\r\n      console.log(e))\r\n};\r\n\r\nexport const getAllBuffyCast = async (setCast) => {\r\n  const url3 = `https://api.tvmaze.com/shows/427/cast`;\r\n  return axios\r\n    .get(url3)\r\n    .then((res) => {\r\n      setCast(res.data)\r\n      })\r\n    .catch((e) =>\r\n      console.log(e))\r\n};\r\n\r\nexport const getAllAngelSeasons = async (setAngelSeasons) => {\r\n  const url4 = `https://api.tvmaze.com/shows/428/seasons`;\r\n  return axios\r\n    .get(url4)\r\n    .then((res) => {\r\n      setAngelSeasons(res.data)\r\n      })\r\n    .catch((e) =>\r\n      console.log(e))\r\n};\r\n\r\nexport const getAllAngelCast = async (setAngelCast) => {\r\n  const url5 = `https://api.tvmaze.com/shows/428/cast`;\r\n  return axios\r\n    .get(url5)\r\n    .then((res) => {\r\n      setAngelCast(res.data)\r\n      })\r\n    .catch((e) =>\r\n      console.log(e))\r\n};","import { useState, useEffect } from \"react\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport { app_background } from \"./data/markdown\";\r\n\r\n// import your custom data fetching function\r\n// TODO: add a data fetching function to the api.js file in the endpoints folder\r\nimport { getAllBuffySeasons, getAllBuffyCast, getAllAngelSeasons, getAllAngelCast } from \"./data/endpoints\";\r\n\r\nconst App = () => {\r\n  const [seasons, setSeasons] = useState(null);\r\n  const [cast, setCast] = useState(null);\r\n  const [angelSeasons, setAngelSeasons] = useState(null);\r\n  const [angelCast, setAngelCast] = useState(null);\r\n\r\n  /**\r\n   * TODO: modify this useEffect to pass as many params as you want\r\n   * - at minimum, pass your state setting function from above\r\n   * - you could also create more state variables to handle multiple params for your endpoint / user input\r\n   */\r\n  useEffect(() => {\r\n    if (!seasons) {\r\n      // if our characters is null, fetch some data!\r\n      getAllBuffySeasons(setSeasons);\r\n    }\r\n    // don't forget to add every state variable you're monitoring to this array!\r\n    if (!cast) {\r\n      getAllBuffyCast(setCast);\r\n    }\r\n    if (!angelSeasons) {\r\n      getAllAngelSeasons(setAngelSeasons);\r\n    }\r\n    if (!angelCast) {\r\n      getAllAngelCast(setAngelCast)\r\n    }\r\n  }, [seasons, cast, angelSeasons, angelCast]);\r\n\r\n  return (\r\n    <div className=\"home\">\r\n      <div id=\"content\">\r\n        <ReactMarkdown className=\"background\" source={app_background} />\r\n\r\n        <h2><u>Buffy the Vampire Slayer Seasons</u></h2>\r\n        <div className=\"container\">\r\n          {/**\r\n           * Code explanation:\r\n           * Feel free to delete this or modify this. It is creating a grid using Boostrap classes\r\n           * - map has a 2nd parameter that tells you the elements index in the array, its good practice to pass this as the key prop\r\n           * - remember to print to console the data you fetch, it will definitely have different properties & values than my data!\r\n           */}\r\n          <div className=\"row justify-content-md-center\">\r\n            {/**\r\n             * - TODO: use a ternary to add conditional react elements\r\n             * - in this case, if characters is null, it displays \"No characters\"\r\n             * - otherwise, it maps through characters and renders info for each person!\r\n             */}\r\n            {seasons ? (\r\n              seasons.map((season, idx) => (\r\n                <div className=\"buffy-seasons\" key={idx}>\r\n                  {/* Displays name of each character */}\r\n                  <h2 className=\"season-number\">{\"Season \" + season.number}</h2>\r\n                  {/* Displays image of each character + adds an additional class (character-img) so I can customize in my CSS file*/}\r\n                  <img\r\n                    src={season.image.original}\r\n                    className=\"img-fluid character-img\"\r\n                    alt=\"season img\"\r\n                  ></img>\r\n                  <h4 className=\"episodes\">{\"Episode Count: \" + season.episodeOrder}</h4>\r\n                  <h4 className=\"premiere\">{\"First Episode: \" + season.premiereDate}</h4>\r\n                  <h4 className=\"end\">{\"Last Episode: \" + season.endDate}</h4>\r\n                  <div className=\"season-summary\">\r\n                    {/* Displays list of each character's allies (stored in an array within the char object called allies) */}\r\n                    <h3 className=\"summary\">Season Summary</h3>\r\n                    <p>{season.summary}</p>\r\n                  </div>\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <div>No Seasons</div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <h2><u>Buffy the Vampire Slayer Cast</u></h2>\r\n        <div className=\"container\">\r\n          <div className=\"row justify-content-md-center\">\r\n            {cast ? (\r\n                  cast.map((castMember, idx) => (\r\n                    <div className=\"buffy-cast\" key={idx}>\r\n                      <h2 className=\"person\">{castMember.person.name}</h2>\r\n                      <img\r\n                        src={castMember.person.image.medium}\r\n                        className=\"img-fluid character-img\"\r\n                        alt=\"cast img\"\r\n                      ></img>\r\n                      <div className=\"character-description\">\r\n                        <h4 className=\"character\">{castMember.character.name}</h4>\r\n                      </div>\r\n                    </div>\r\n                  ))\r\n                ) : (\r\n                  <div>No Cast</div>\r\n                )}\r\n          </div>\r\n        </div>\r\n        <h2><u>Angel Seasons</u></h2>\r\n        <div className=\"container\">\r\n          <div className=\"row justify-content-md-center\">\r\n            {angelSeasons ? (\r\n                  angelSeasons.map((angelSeason, idx) => (\r\n                    <div className=\"angel-seasons\" key={idx}>\r\n                      <h2 className=\"season-number\"><span>{\"Season \" + angelSeason.number}</span></h2>\r\n                      <img\r\n                      src={angelSeason.image.medium}\r\n                      className=\"img-fluid character-img\"\r\n                      alt=\"season img\"\r\n                      ></img>\r\n                      <h4 className=\"episodes\">{\"Episode Count: \" + angelSeason.episodeOrder}</h4>\r\n                      <h4 className=\"premiere\">{\"First Episode: \" + angelSeason.premiereDate}</h4>\r\n                      <h4 className=\"end\">{\"Last Episode: \" + angelSeason.endDate}</h4>\r\n                      <div className=\"season-summary\">\r\n                        {/* Displays list of each character's allies (stored in an array within the char object called allies) */}\r\n                        <h3 className=\"summary\"><span>Season Summary</span></h3>\r\n                        <p>{angelSeason.summary}</p>\r\n                      </div>\r\n                    </div>\r\n                  ))\r\n                ) : (\r\n                  <div>No Seasons</div>\r\n                )}\r\n          </div>\r\n        </div>\r\n        <h2><u>Angel Cast</u></h2>\r\n        <div className=\"container\">\r\n          <div className=\"row justify-content-md-center\">\r\n            {angelCast ? (\r\n                  angelCast.map((angelCastMember, idx) => (\r\n                    <div className=\"angel-cast\" key={idx}>\r\n                      <h2 className=\"person\"><span>{angelCastMember.person.name}</span></h2>\r\n                      <img\r\n                        src={angelCastMember.person.image.medium}\r\n                        className=\"img-fluid character-img\"\r\n                        alt=\"cast img\"\r\n                      ></img>\r\n                      <div className=\"character-description\">\r\n                        <h4 className=\"character\">{angelCastMember.character.name}</h4>\r\n                      </div>\r\n                    </div>\r\n                  ))\r\n                ) : (\r\n                  <div>No Cast</div>\r\n                )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const app_background = `##### Info about Buffy the Vampire Slayer & Angel!`;\r\n\r\nexport default app_background;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter, Route } from \"react-router-dom\";\r\n\r\nimport { Header, Footer } from \"./components\";\r\nimport App from \"./App\";\r\n\r\nimport \"./index.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nconst Index = () => (\r\n  <div className=\"main\">\r\n    <BrowserRouter>\r\n      <Header />\r\n      <div>\r\n        <Route path=\"/\" component={App} />\r\n      </div>\r\n      <Footer />\r\n    </BrowserRouter>\r\n  </div>\r\n);\r\n\r\nReactDOM.render(<Index />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}